/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { styled } from '@mui/material/styles';
import Chevron from './Chevron';
import { Button1Props } from './types';
import useButton1 from './useButton1';
 
const SizeMediumHierarchyH: any = styled("div")({  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: `126px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  cursor: `pointer`,  
});
  
const ButtonBase: any = styled("div", {
    shouldForwardProp: prop => !["props", "data"].includes(prop.toString())
  })(({ theme, props, data }: any) =>({  
  backgroundColor: data.isActive && props.completed?.length !== 4 && props.currentAnswer ? `rgba(80, 50, 184, 1)` : props.completed?.length === 4 || !props.currentAnswer ? `rgba(222, 226, 230, 1)` : `rgba(101, 63, 230, 1)`,  
  border: data.isActive && props.completed?.length !== 4 && props.currentAnswer ? `1px solid rgba(80, 50, 184, 1)` : props.completed?.length === 4 || !props.currentAnswer ? `1px solid rgba(222, 226, 230, 1)` : `1px solid rgba(101, 63, 230, 1)`,  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `8px 14px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  height: `32px`,  
  margin: `0px`,  
  overflow: `hidden`,  
}));
  
const Text: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(255, 255, 255, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  lineHeight: `21px`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Chevron1: any = styled(Chevron)(({ theme }: any) =>({  
  width: `16px`,  
  height: `16px`,  
  margin: `0px 0px 0px 8px`,  
}));
 
function Button1(props: Button1Props): JSX.Element {
  const {data, fns} = useButton1();
  return (
    <SizeMediumHierarchyH className={props.className} onClick={props.onClick} onMouseOver={fns.setActive} onMouseLeave={fns.setInactive} >
      <ButtonBase props={props} data={data} >
        <Text >
          {"Next"}
            </Text>
        <Chevron1   direction="right"/>
      </ButtonBase>
    </SizeMediumHierarchyH>
  );
}

export default Button1;
