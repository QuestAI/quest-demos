/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { styled } from '@mui/material/styles';
import ProgressStepsProgressMinimalIc from './ProgressStepsProgressMinimalIc';
import ViewerQuestionType from './ViewerQuestionType';
import Button1 from './Button1';
import { QuizViewerModuleProps } from './types';
import useQuizViewerModule from './useQuizViewerModule';
 
const QuizViewerModule1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `420px`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const Frame141: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Frame1411: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `24px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Group141: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `24px`,  
  width: `420px`,  
  margin: `0px`,  
});
  
const QuizTitle: any = styled("div")(({ theme }: any) =>({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(52, 58, 64, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `600`,  
  fontSize: `20px`,  
  letterSpacing: `-0.4px`,  
  textDecoration: `none`,  
  lineHeight: `23.040000915527344px`,  
  textTransform: `none`,  
  width: `420px`,  
  position: `absolute`,  
  left: `0px`,  
  top: `0px`,  
}));
  
const ProgressStepsProgres: any = styled(ProgressStepsProgressMinimalIc)(({ theme }: any) =>({  
  width: `420px`,  
  margin: `20px 0px 0px 0px`,  
}));
  
const Question: any = styled("div")(({ theme }: any) =>({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(52, 58, 64, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `400`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  lineHeight: `24px`,  
  textTransform: `none`,  
  width: `420px`,  
  margin: `20px 0px 0px 0px`,  
}));
  
const Frame1412: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `32px 0px 0px 0px`,  
});
  
const AnswerOptions: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px 22px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ViewerQuestionType1: any = styled(ViewerQuestionType)(({ theme }: any) =>({  
  alignSelf: `stretch`,  
  margin: `0px`,  
}));
  
const ViewerQuestionType2: any = styled(ViewerQuestionType)(({ theme }: any) =>({  
  alignSelf: `stretch`,  
  margin: `12px 0px 0px 0px`,  
}));
  
const ViewerQuestionType3: any = styled(ViewerQuestionType)(({ theme }: any) =>({  
  alignSelf: `stretch`,  
  margin: `12px 0px 0px 0px`,  
}));
  
const ViewerQuestionType4: any = styled(ViewerQuestionType)(({ theme }: any) =>({  
  alignSelf: `stretch`,  
  margin: `12px 0px 0px 0px`,  
}));
  
const Button2: any = styled(Button1)(({ theme }: any) =>({  
  margin: `32px 0px 0px 0px`,  
}));
 
function QuizViewerModule(props: QuizViewerModuleProps): JSX.Element {
  const {data, fns} = useQuizViewerModule();
  return (
    <QuizViewerModule1 className={props.className} >
      <Frame141 >
        <Frame1411 >
          <Group141 >
            <QuizTitle >
              {`Quiz: Title`}
                </QuizTitle>
          </Group141>
          <ProgressStepsProgres   completed={data.completedQuestions} current={data.currentQuestion}/>
          <Question >
            {data.currentQuestion ? "Question " + data.currentQuestion : "Quiz is completed"}
              </Question>
        </Frame1411>
        <Frame1412 >
          <AnswerOptions >
            {(data.completedQuestions.length < 4) &&
              <ViewerQuestionType1   number={1} setCurrentAnswer={fns.setCurrentAnswer} currentAnswer={data.currentAnswer} completed={data.completedQuestions} />
            }
            {(data.completedQuestions.length < 4) &&
              <ViewerQuestionType2   number={2} setCurrentAnswer={fns.setCurrentAnswer} currentAnswer={data.currentAnswer} completed={data.completedQuestions} />
            }
            {(data.completedQuestions.length < 4) &&
              <ViewerQuestionType3   number={3} setCurrentAnswer={fns.setCurrentAnswer} currentAnswer={data.currentAnswer} completed={data.completedQuestions} />
            }
            {(data.completedQuestions.length < 4) &&
              <ViewerQuestionType4   number={4} setCurrentAnswer={fns.setCurrentAnswer} currentAnswer={data.currentAnswer} completed={data.completedQuestions} />
            }
          </AnswerOptions>
          {(data.completedQuestions.length < 4) &&
            <Button2   onClick={() => { fns.setCompleted (data.currentQuestion)} } completed={data.completedQuestions} current={data.currentQuestion} currentAnswer={data.currentAnswer}/>
          }
        </Frame1412>
      </Frame141>
    </QuizViewerModule1>
  );
}

export default QuizViewerModule;
